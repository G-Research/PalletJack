# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Python-cd

on:
  push:

jobs:
  build:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      working-directory: ./python
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest build
        pip install -r requirements.txt
        pip install cibuildwheel

    - name: Build sdist (on Linux)
      if: runner.os == 'linux'
      working-directory: ./python
      run: |
        python -m build --sdist 

    - name: Build wheels
      working-directory: ./python
      run: python -m cibuildwheel --output-dir dist
      # to supply options, put them in 'env', like:
      env:
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair --exclude libarrow.so.1500 --exclude libparquet.so.1500 -w {dest_dir} {wheel}
        CIBW_ENVIRONMENT: CYTHONIZE=1
        CIBW_BUILD_VERBOSITY: 1
        # We use manylinux_2_28 for ABI compatibility with pyarrow
        # With the default image we were getting "undefined symbol: _ZNK5arrow6Status8ToStringEv" error (e.g https://github.com/ray-project/ray/issues/24566) 
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28 
        # Disable unsupported builds
        CIBW_SKIP: "pp* *_i686 *-musllinux_* *win32" 

    - uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: ./python/dist/*

  publish:
    if: ${{ !github.event.repository.fork && startsWith(github.ref, 'refs/tags/v') }}
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R dist

      - name: Validate tag
        shell: pwsh
        run: |
          $tag = "${{ github.ref }}".SubString(11)
          $expectedFile = "dist/palletjack-$tag.tar.gz"

          # Check whether the tag and the package version match together
          if (-not (Test-Path -Path $expectedFile)) {
              echo "::error ::Expected file $expectedFile doesn't exist"
              exit 1
          }

      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@c12cc61414480c03e10ea76e2a0a1a17d6c764e2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist	
