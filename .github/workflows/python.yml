# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python

on:
  push:
  pull_request:
  schedule:
    # Run daily at 00:00 so we get notified if CI is broken before a pull request is submitted.
    # It also notifies us about new Arrow releases for which we need to release a corresponding version of PalletJack.
    - cron:  '0 0 * * *'

permissions:
  contents: read

jobs:

  test:
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install dependencies
      working-directory: ./python
      shell: bash
      run: |
        sudo apt-get install -y libthrift-dev libboost-all-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      working-directory: ./python
      run: |
        pip install --editable .
        pytest

  build-wheels:
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, windows-latest, ubuntu-22.04-arm64, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v5
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Restore cached vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ./python/vcpkg_installed
          ./python/vcpkg
        # We use a key which is unique for every run and use restore-keys to restore the nearest cache.
        # That makes sure the cache is always updated.
        key: vcpkg-${{ matrix.runner }}-${{ github.run_id }} 
        restore-keys: |
          vcpkg-${{ matrix.runner }}

    # Install vcpkg dependencies
    - name: Install vcpkg build dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install bison

    - name: Build sdist (Linux)
      if: runner.os == 'linux'
      working-directory: ./python
      run: |
        pip install build
        python -m build --sdist

    - name: Build wheels
      working-directory: ./python
      run: |
        pip install cibuildwheel
        cibuildwheel --output-dir dist
      env:
        CIBW_BUILD_VERBOSITY: 1

    - name: Post cibuildwheel - move vcpkg to cached location
      if: runner.os == 'linux'
      working-directory: ./python
      run: |
        rm -rf vcpkg && mv ./dist/vcpkg vcpkg
        rm -rf vcpkg_installed &&  mv ./dist/vcpkg_installed vcpkg_installed

    - uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.runner }}
        path: ./python/dist/*

  test-binary:
    needs: build-wheels
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, windows-latest, ubuntu-22.04-arm64, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v5
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Download artifacts
      uses: actions/download-artifact@v5
      with:
        pattern: dist-*
        path: dist
        merge-multiple: true

    - name: Test binary
      run: |
        pip install -r python/requirements.txt

        # Keep in mind that if the local and remote versions are the same, the remote version will be installed
        pip install PalletJack --pre --find-links ./dist --break-system-packages --only-binary=:all:

        # So now ensure that the local version is installed
        pip install PalletJack --pre --find-links ./dist --break-system-packages --only-binary=:all: --force-reinstall --no-index --no-deps

        python3 python/test/test_palletjack.py

  test-binary-manylinux:
    needs: build-wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["cp39-cp39", "cp310-cp310", "cp311-cp311", "cp312-cp312", "cp313-cp313"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
  
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: dist-*
          path: python/dist
          merge-multiple: true
  
      - name: Build and Run Docker Container for Tests
        working-directory: ./python
        run: |
          # Build the Docker image with Python version as build arg
          docker build \
            --build-arg PYTHON_VERSION=${{ matrix.python-version }} \
            -t palletjack-test-py${{ matrix.python-version }} \
            --progress plain \
            -f Dockerfile.test .
          docker run palletjack-test-py${{ matrix.python-version }}

  # Virtual job that can be configured as a required check before a PR can be merged.
  # As GitHub considers a check as successful if it is skipped, we need to check its status in
  # another workflow (check-required.yml) and create a check there.
  all-required-checks-done:
    name: All required checks done
    needs:
      - test
      - build-wheels
      - test-binary
      - test-binary-manylinux
    runs-on: ubuntu-latest
    steps:
      - run: echo "All required checks done"

  benchmarks:
    needs: build-wheels
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, windows-latest, ubuntu-22.04-arm64, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v5
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Download artifacts
      uses: actions/download-artifact@v5
      with:
        pattern: dist-*
        path: dist
        merge-multiple: true

    - name: Run benchmarks
      run: |
        pip install -r python/requirements.txt

        # Keep in mind that if the local and remote versions are the same, the remote version will be installed
        pip install PalletJack --pre --find-links ./dist --break-system-packages --only-binary=:all:

        # So now ensure that the local version is installed
        pip install PalletJack --pre --find-links ./dist --break-system-packages --only-binary=:all: --force-reinstall --no-index --no-deps

        python3 ./benchmarks/benchmark_palletjack_metadata.py

  publish:
    if: ${{ !github.event.repository.fork && startsWith(github.ref, 'refs/tags/v') }}
    needs: [all-required-checks-done]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v5
      with:
        pattern: dist-*
        path: dist
        merge-multiple: true

    - name: Display structure of downloaded files
      run: ls -R dist

    - name: Validate tag
      shell: pwsh
      run: |
        $tag = "${{ github.ref }}".SubString(11)
        $expectedFile = "dist/palletjack-$tag.tar.gz"

        # Check whether the tag and the package version match together
        if (-not (Test-Path -Path $expectedFile)) {
            echo "::error ::Expected file $expectedFile doesn't exist"
            Get-ChildItem -Path dist
            exit 1
        }

    - name: Publish to PyPi
      uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc
      with:
        packages-dir: dist
